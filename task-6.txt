
--------------------------------------------------------------------------   Creating an IndexedDB structure   -------------------------------------------------------------------------------------------------
Lessons Learned: It is important to understand the importance of version control in IndexedDB event management. onupgradeneeded Proper implementation ensures that object stores and indexes are created as needed.

Challenges Encountered: Early attempts to create an object store resulted in errors when attempting to access a non-existent object store. This emphasizes the need for thorough screening before entering any store.

Key insights gained: Careful planning of the database schema. Including relationships between object stores. Can prevent various problems many in the production line

Results: After clarifying versioning and properly managing object store creation. This work went well.

Population of TodoList stores
Lessons Learned: Data population simulation effectively reveals the structure of an object store. and help identify any problems. with data model

Challenges found: Additional checks are required to ensure that job status is displayed correctly (e.g. completed or in progress).

Key insights gained: A clear and consistent data format is essential for efficient search and retrieval.

Execution Results: This assignment went well because it laid a solid foundation for testing subsequent executions.

 -------------------------------------------------------------------   Work reflection for work and measurement of reading time  ----------------------------------------------------------------------------------

Task Reflections for Operations and Measuring Read Time
1. Measuring Read Time for Completed Tasks
Lessons Learned: Timing the read operations provided insights into the performance of IndexedDB queries, emphasizing the need for efficiency in database design.

Challenges Faced: Initially, reading all objects with the status set to "completed" took longer than expected due to inefficient querying methods.

Key Insights Gained: Using indexes significantly speeds up read operations, especially in larger datasets, and measuring performance is crucial for optimizing database access.

Task Outcome: This task went well after optimizing the query method, providing valuable timing data for future operations.

2. Applying a Read-Only Flag to the Object Store and Measuring Read Time Again
Lessons Learned: Implementing read-only transactions highlighted the differences in permissions and the impact on data integrity during read operations.

Challenges Faced: Understanding the nuances of read-only transactions was challenging, particularly in ensuring that no modifications could occur during read operations.

Key Insights Gained: Read-only transactions can be beneficial for performance, especially in scenarios where data does not need to be modified, but care must be taken to manage state changes appropriately.

Task Outcome: This task was successful, providing insights into how read-only transactions impact performance measurements.

3. Creating an Index on the Status Field and Measuring Time to Read All "Completed" Tasks
Lessons Learned: Creating indexes on frequently queried fields, such as status, significantly enhances query performance.

Challenges Faced: The challenge was ensuring that the index was created correctly and that the read operation utilized this index effectively.

Key Insights Gained: The importance of properly structuring data and indexes in IndexedDB cannot be overstated. Well-designed indexes can lead to drastic improvements in query performance.

Task Outcome: This task went well after ensuring the index was properly created and utilized during read operations, leading to faster query times.

4.  Copying Completed Tasks to TodoListCompleted Store
Lessons Learned: The necessity of checking for the existence of object stores before attempting to access them became evident. This reinforced best practices for error handling in IndexedDB operations.

Challenges Faced: The primary challenge was encountering the NotFoundError when trying to create transactions with stores that hadn’t been created or were incorrectly referenced.

Key Insights Gained: Incremental testing and debugging, including clearing IndexedDB between tests, can help resolve conflicts from previous runs and ensure a clean slate for new operations.

Task Outcome: This task faced difficulties initially due to store referencing issues but was ultimately successful after making necessary adjustments.


-------------------------------------------------------------------------- Overall Reflection  -------------------------------------------------------------------------------------------------

Which Task Went Well: 
    2. The creation of the index on the status field and the subsequent read performance measurement went well, showcasing the benefits of optimizing database queries.
    3.The population of the TodoList store went smoothly, providing a strong dataset for further operations. It demonstrated how to structure and insert data effectively.

Which Task Did Not Go Well: 
    1.The initial attempts to copy completed tasks faced challenges due to incorrect store references, highlighting gaps in understanding IndexedDB's upgrade and transaction mechanics.
    2.The initial measurement of read times for completed tasks faced challenges due to inefficient querying methods, which required adjustments to optimize performance.


Final Insights
Performance Measurement: Regularly measuring the performance of database operations is essential for identifying bottlenecks and areas for optimization.

Importance of Indexes: This set of tasks reinforced the critical role that indexes play in speeding up read operations, particularly in large datasets. Implementing appropriate indexes can have a profound impact on application performance.

Read-Only Transactions: Exploring read-only transactions offered valuable insights into how data integrity and performance can be balanced in different scenarios, informing future database designs.

Iterative Improvement: Each task served as a learning opportunity, emphasizing the importance of iterative testing and refinement in the development process. Debugging and performance tuning should be ongoing processes in database management.

Continuous Learning: Each task contributed to a deeper understanding of IndexedDB’s functionalities and the importance of meticulous planning and validation during database design and operation.

Incremental Testing: Conducting incremental tests, especially with database operations, proved invaluable for troubleshooting and ensuring each component worked correctly before moving on to the next step.

Documentation and Comments: Keeping detailed comments in the code helped clarify intentions and the structure of the database, making it easier to identify potential issues later on.